// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"github.com/cold-runner/simpleTikTok/apiServer/biz/handler/response"
	"github.com/cold-runner/simpleTikTok/apiServer/rpc"
	"github.com/cold-runner/simpleTikTok/pkg/log"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cold-runner/simpleTikTok/apiServer/biz/model/ApiServer"
	"github.com/cold-runner/simpleTikTok/kitex_gen/RelationService"
	"github.com/cold-runner/simpleTikTok/pkg/middleware"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.UserRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get(middleware.IdentityKey)
	resp, err := rpc.RelationAction(context.Background(),
		&RelationService.RelationActionRequest{
			Uid:        v.(*ApiServer.User).Id,
			ToUserId:   req.ToUserId,
			ActionType: req.ActionType,
		})
	if err != nil {
		response.SendRelationActionResponse(c, err)
		return
	}

	response.SendRelationActionResponse(c, resp)
}

// GetFollowList .
// @router /douyin/relation/follow/list/ [GET]
func GetFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.UserFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get(middleware.IdentityKey)
	resp, err := rpc.GetFollowList(context.Background(),
		&RelationService.RelationFollowListRequest{
			Uid:   v.(*ApiServer.User).Id,
			ToUid: req.UserId,
		})
	if err != nil {
		log.Errorw("api server rpc get follow list failed", "err", err)
		response.SendFollowListResponse(c, resp, err)
		return
	}
	log.Debugw("api server rpc get follow list success", "resp", resp)
	response.SendFollowListResponse(c, resp, nil)
}

// GetFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.UserFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get(middleware.IdentityKey)
	resp, err := rpc.GetFollowerList(context.Background(),
		&RelationService.RelationFollowerListRequest{
			Uid:   v.(*ApiServer.User).Id,
			ToUid: req.UserId,
		})
	if err != nil {
		log.Errorw("api server rpc get follower list failed", "err", err)
		response.SendFollowerListResponse(c, resp, err)
		return
	}
	log.Debugw("api server rpc get follower list success", "resp", resp)
	response.SendFollowerListResponse(c, resp, nil)
}
