// Code generated by Kitex v0.6.2. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	VideoService "github.com/cold-runner/simpleTikTok/kitex_gen/VideoService"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	VideoFeed(ctx context.Context, Req *VideoService.VideoFeedRequest, callOptions ...callopt.Option) (r *VideoService.VideoFeedResponse, err error)
	VideoPublishAction(ctx context.Context, Req *VideoService.VideoPublishActionRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishActionResponse, err error)
	VideoPublishList(ctx context.Context, Req *VideoService.VideoPublishListRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishListResponse, err error)
	VideoPublishListByIds(ctx context.Context, Req *VideoService.VideoPublishListByIdsRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishListResponse, err error)
	UpdateVideoFavoriteCount(ctx context.Context, Req *VideoService.UpdateVideoFavoriteCountRequest, callOptions ...callopt.Option) (r *VideoService.UpdateVideoInfoResponse, err error)
	UpdateVideoCommentCount(ctx context.Context, Req *VideoService.UpdateVideoCommentCountRequest, callOptions ...callopt.Option) (r *VideoService.UpdateVideoInfoResponse, err error)
	GetAuthorIdByVideoId(ctx context.Context, Req *VideoService.GetAuthorIdByVideoIdRequest, callOptions ...callopt.Option) (r *VideoService.GetAuthorIdByVideoIdResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) VideoFeed(ctx context.Context, Req *VideoService.VideoFeedRequest, callOptions ...callopt.Option) (r *VideoService.VideoFeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoFeed(ctx, Req)
}

func (p *kVideoServiceClient) VideoPublishAction(ctx context.Context, Req *VideoService.VideoPublishActionRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishAction(ctx, Req)
}

func (p *kVideoServiceClient) VideoPublishList(ctx context.Context, Req *VideoService.VideoPublishListRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishList(ctx, Req)
}

func (p *kVideoServiceClient) VideoPublishListByIds(ctx context.Context, Req *VideoService.VideoPublishListByIdsRequest, callOptions ...callopt.Option) (r *VideoService.VideoPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishListByIds(ctx, Req)
}

func (p *kVideoServiceClient) UpdateVideoFavoriteCount(ctx context.Context, Req *VideoService.UpdateVideoFavoriteCountRequest, callOptions ...callopt.Option) (r *VideoService.UpdateVideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoFavoriteCount(ctx, Req)
}

func (p *kVideoServiceClient) UpdateVideoCommentCount(ctx context.Context, Req *VideoService.UpdateVideoCommentCountRequest, callOptions ...callopt.Option) (r *VideoService.UpdateVideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoCommentCount(ctx, Req)
}

func (p *kVideoServiceClient) GetAuthorIdByVideoId(ctx context.Context, Req *VideoService.GetAuthorIdByVideoIdRequest, callOptions ...callopt.Option) (r *VideoService.GetAuthorIdByVideoIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAuthorIdByVideoId(ctx, Req)
}
