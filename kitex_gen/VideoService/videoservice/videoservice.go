// Code generated by Kitex v0.6.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	VideoService "github.com/cold-runner/simpleTikTok/kitex_gen/VideoService"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*VideoService.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VideoFeed":                kitex.NewMethodInfo(videoFeedHandler, newVideoFeedArgs, newVideoFeedResult, false),
		"VideoPublishAction":       kitex.NewMethodInfo(videoPublishActionHandler, newVideoPublishActionArgs, newVideoPublishActionResult, false),
		"VideoPublishList":         kitex.NewMethodInfo(videoPublishListHandler, newVideoPublishListArgs, newVideoPublishListResult, false),
		"VideoPublishListByIds":    kitex.NewMethodInfo(videoPublishListByIdsHandler, newVideoPublishListByIdsArgs, newVideoPublishListByIdsResult, false),
		"UpdateVideoFavoriteCount": kitex.NewMethodInfo(updateVideoFavoriteCountHandler, newUpdateVideoFavoriteCountArgs, newUpdateVideoFavoriteCountResult, false),
		"UpdateVideoCommentCount":  kitex.NewMethodInfo(updateVideoCommentCountHandler, newUpdateVideoCommentCountArgs, newUpdateVideoCommentCountResult, false),
		"GetAuthorIdByVideoId":     kitex.NewMethodInfo(getAuthorIdByVideoIdHandler, newGetAuthorIdByVideoIdArgs, newGetAuthorIdByVideoIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func videoFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.VideoFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).VideoFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoFeedArgs:
		success, err := handler.(VideoService.VideoService).VideoFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoFeedResult)
		realResult.Success = success
	}
	return nil
}
func newVideoFeedArgs() interface{} {
	return &VideoFeedArgs{}
}

func newVideoFeedResult() interface{} {
	return &VideoFeedResult{}
}

type VideoFeedArgs struct {
	Req *VideoService.VideoFeedRequest
}

func (p *VideoFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.VideoFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoFeedArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoFeedArgs_Req_DEFAULT *VideoService.VideoFeedRequest

func (p *VideoFeedArgs) GetReq() *VideoService.VideoFeedRequest {
	if !p.IsSetReq() {
		return VideoFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoFeedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoFeedResult struct {
	Success *VideoService.VideoFeedResponse
}

var VideoFeedResult_Success_DEFAULT *VideoService.VideoFeedResponse

func (p *VideoFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.VideoFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoFeedResult) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoFeedResult) GetSuccess() *VideoService.VideoFeedResponse {
	if !p.IsSetSuccess() {
		return VideoFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.VideoFeedResponse)
}

func (p *VideoFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoFeedResult) GetResult() interface{} {
	return p.Success
}

func videoPublishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.VideoPublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).VideoPublishAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoPublishActionArgs:
		success, err := handler.(VideoService.VideoService).VideoPublishAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoPublishActionResult)
		realResult.Success = success
	}
	return nil
}
func newVideoPublishActionArgs() interface{} {
	return &VideoPublishActionArgs{}
}

func newVideoPublishActionResult() interface{} {
	return &VideoPublishActionResult{}
}

type VideoPublishActionArgs struct {
	Req *VideoService.VideoPublishActionRequest
}

func (p *VideoPublishActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.VideoPublishActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoPublishActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoPublishActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoPublishActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoPublishActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoPublishActionArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoPublishActionArgs_Req_DEFAULT *VideoService.VideoPublishActionRequest

func (p *VideoPublishActionArgs) GetReq() *VideoService.VideoPublishActionRequest {
	if !p.IsSetReq() {
		return VideoPublishActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoPublishActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoPublishActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoPublishActionResult struct {
	Success *VideoService.VideoPublishActionResponse
}

var VideoPublishActionResult_Success_DEFAULT *VideoService.VideoPublishActionResponse

func (p *VideoPublishActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.VideoPublishActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoPublishActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoPublishActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoPublishActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoPublishActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoPublishActionResult) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoPublishActionResult) GetSuccess() *VideoService.VideoPublishActionResponse {
	if !p.IsSetSuccess() {
		return VideoPublishActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoPublishActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.VideoPublishActionResponse)
}

func (p *VideoPublishActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoPublishActionResult) GetResult() interface{} {
	return p.Success
}

func videoPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.VideoPublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).VideoPublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoPublishListArgs:
		success, err := handler.(VideoService.VideoService).VideoPublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoPublishListResult)
		realResult.Success = success
	}
	return nil
}
func newVideoPublishListArgs() interface{} {
	return &VideoPublishListArgs{}
}

func newVideoPublishListResult() interface{} {
	return &VideoPublishListResult{}
}

type VideoPublishListArgs struct {
	Req *VideoService.VideoPublishListRequest
}

func (p *VideoPublishListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.VideoPublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoPublishListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoPublishListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoPublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoPublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoPublishListArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoPublishListArgs_Req_DEFAULT *VideoService.VideoPublishListRequest

func (p *VideoPublishListArgs) GetReq() *VideoService.VideoPublishListRequest {
	if !p.IsSetReq() {
		return VideoPublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoPublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoPublishListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoPublishListResult struct {
	Success *VideoService.VideoPublishListResponse
}

var VideoPublishListResult_Success_DEFAULT *VideoService.VideoPublishListResponse

func (p *VideoPublishListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.VideoPublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoPublishListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoPublishListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoPublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoPublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoPublishListResult) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoPublishListResult) GetSuccess() *VideoService.VideoPublishListResponse {
	if !p.IsSetSuccess() {
		return VideoPublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoPublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.VideoPublishListResponse)
}

func (p *VideoPublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoPublishListResult) GetResult() interface{} {
	return p.Success
}

func videoPublishListByIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.VideoPublishListByIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).VideoPublishListByIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoPublishListByIdsArgs:
		success, err := handler.(VideoService.VideoService).VideoPublishListByIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoPublishListByIdsResult)
		realResult.Success = success
	}
	return nil
}
func newVideoPublishListByIdsArgs() interface{} {
	return &VideoPublishListByIdsArgs{}
}

func newVideoPublishListByIdsResult() interface{} {
	return &VideoPublishListByIdsResult{}
}

type VideoPublishListByIdsArgs struct {
	Req *VideoService.VideoPublishListByIdsRequest
}

func (p *VideoPublishListByIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.VideoPublishListByIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoPublishListByIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoPublishListByIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoPublishListByIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoPublishListByIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoPublishListByIdsArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishListByIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoPublishListByIdsArgs_Req_DEFAULT *VideoService.VideoPublishListByIdsRequest

func (p *VideoPublishListByIdsArgs) GetReq() *VideoService.VideoPublishListByIdsRequest {
	if !p.IsSetReq() {
		return VideoPublishListByIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoPublishListByIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoPublishListByIdsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoPublishListByIdsResult struct {
	Success *VideoService.VideoPublishListResponse
}

var VideoPublishListByIdsResult_Success_DEFAULT *VideoService.VideoPublishListResponse

func (p *VideoPublishListByIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.VideoPublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoPublishListByIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoPublishListByIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoPublishListByIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoPublishListByIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoPublishListByIdsResult) Unmarshal(in []byte) error {
	msg := new(VideoService.VideoPublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoPublishListByIdsResult) GetSuccess() *VideoService.VideoPublishListResponse {
	if !p.IsSetSuccess() {
		return VideoPublishListByIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoPublishListByIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.VideoPublishListResponse)
}

func (p *VideoPublishListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoPublishListByIdsResult) GetResult() interface{} {
	return p.Success
}

func updateVideoFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.UpdateVideoFavoriteCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).UpdateVideoFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateVideoFavoriteCountArgs:
		success, err := handler.(VideoService.VideoService).UpdateVideoFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateVideoFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateVideoFavoriteCountArgs() interface{} {
	return &UpdateVideoFavoriteCountArgs{}
}

func newUpdateVideoFavoriteCountResult() interface{} {
	return &UpdateVideoFavoriteCountResult{}
}

type UpdateVideoFavoriteCountArgs struct {
	Req *VideoService.UpdateVideoFavoriteCountRequest
}

func (p *UpdateVideoFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.UpdateVideoFavoriteCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateVideoFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateVideoFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateVideoFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateVideoFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateVideoFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.UpdateVideoFavoriteCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateVideoFavoriteCountArgs_Req_DEFAULT *VideoService.UpdateVideoFavoriteCountRequest

func (p *UpdateVideoFavoriteCountArgs) GetReq() *VideoService.UpdateVideoFavoriteCountRequest {
	if !p.IsSetReq() {
		return UpdateVideoFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateVideoFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateVideoFavoriteCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateVideoFavoriteCountResult struct {
	Success *VideoService.UpdateVideoInfoResponse
}

var UpdateVideoFavoriteCountResult_Success_DEFAULT *VideoService.UpdateVideoInfoResponse

func (p *UpdateVideoFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.UpdateVideoInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateVideoFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateVideoFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateVideoFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateVideoFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateVideoFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(VideoService.UpdateVideoInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateVideoFavoriteCountResult) GetSuccess() *VideoService.UpdateVideoInfoResponse {
	if !p.IsSetSuccess() {
		return UpdateVideoFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateVideoFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.UpdateVideoInfoResponse)
}

func (p *UpdateVideoFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateVideoFavoriteCountResult) GetResult() interface{} {
	return p.Success
}

func updateVideoCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.UpdateVideoCommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).UpdateVideoCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateVideoCommentCountArgs:
		success, err := handler.(VideoService.VideoService).UpdateVideoCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateVideoCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateVideoCommentCountArgs() interface{} {
	return &UpdateVideoCommentCountArgs{}
}

func newUpdateVideoCommentCountResult() interface{} {
	return &UpdateVideoCommentCountResult{}
}

type UpdateVideoCommentCountArgs struct {
	Req *VideoService.UpdateVideoCommentCountRequest
}

func (p *UpdateVideoCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.UpdateVideoCommentCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateVideoCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateVideoCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateVideoCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateVideoCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateVideoCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.UpdateVideoCommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateVideoCommentCountArgs_Req_DEFAULT *VideoService.UpdateVideoCommentCountRequest

func (p *UpdateVideoCommentCountArgs) GetReq() *VideoService.UpdateVideoCommentCountRequest {
	if !p.IsSetReq() {
		return UpdateVideoCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateVideoCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateVideoCommentCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateVideoCommentCountResult struct {
	Success *VideoService.UpdateVideoInfoResponse
}

var UpdateVideoCommentCountResult_Success_DEFAULT *VideoService.UpdateVideoInfoResponse

func (p *UpdateVideoCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.UpdateVideoInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateVideoCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateVideoCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateVideoCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateVideoCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateVideoCommentCountResult) Unmarshal(in []byte) error {
	msg := new(VideoService.UpdateVideoInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateVideoCommentCountResult) GetSuccess() *VideoService.UpdateVideoInfoResponse {
	if !p.IsSetSuccess() {
		return UpdateVideoCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateVideoCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.UpdateVideoInfoResponse)
}

func (p *UpdateVideoCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateVideoCommentCountResult) GetResult() interface{} {
	return p.Success
}

func getAuthorIdByVideoIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(VideoService.GetAuthorIdByVideoIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(VideoService.VideoService).GetAuthorIdByVideoId(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAuthorIdByVideoIdArgs:
		success, err := handler.(VideoService.VideoService).GetAuthorIdByVideoId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAuthorIdByVideoIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetAuthorIdByVideoIdArgs() interface{} {
	return &GetAuthorIdByVideoIdArgs{}
}

func newGetAuthorIdByVideoIdResult() interface{} {
	return &GetAuthorIdByVideoIdResult{}
}

type GetAuthorIdByVideoIdArgs struct {
	Req *VideoService.GetAuthorIdByVideoIdRequest
}

func (p *GetAuthorIdByVideoIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(VideoService.GetAuthorIdByVideoIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAuthorIdByVideoIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAuthorIdByVideoIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAuthorIdByVideoIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAuthorIdByVideoIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAuthorIdByVideoIdArgs) Unmarshal(in []byte) error {
	msg := new(VideoService.GetAuthorIdByVideoIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAuthorIdByVideoIdArgs_Req_DEFAULT *VideoService.GetAuthorIdByVideoIdRequest

func (p *GetAuthorIdByVideoIdArgs) GetReq() *VideoService.GetAuthorIdByVideoIdRequest {
	if !p.IsSetReq() {
		return GetAuthorIdByVideoIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAuthorIdByVideoIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAuthorIdByVideoIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAuthorIdByVideoIdResult struct {
	Success *VideoService.GetAuthorIdByVideoIdResponse
}

var GetAuthorIdByVideoIdResult_Success_DEFAULT *VideoService.GetAuthorIdByVideoIdResponse

func (p *GetAuthorIdByVideoIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(VideoService.GetAuthorIdByVideoIdResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAuthorIdByVideoIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAuthorIdByVideoIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAuthorIdByVideoIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAuthorIdByVideoIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAuthorIdByVideoIdResult) Unmarshal(in []byte) error {
	msg := new(VideoService.GetAuthorIdByVideoIdResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAuthorIdByVideoIdResult) GetSuccess() *VideoService.GetAuthorIdByVideoIdResponse {
	if !p.IsSetSuccess() {
		return GetAuthorIdByVideoIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAuthorIdByVideoIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoService.GetAuthorIdByVideoIdResponse)
}

func (p *GetAuthorIdByVideoIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAuthorIdByVideoIdResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoFeed(ctx context.Context, Req *VideoService.VideoFeedRequest) (r *VideoService.VideoFeedResponse, err error) {
	var _args VideoFeedArgs
	_args.Req = Req
	var _result VideoFeedResult
	if err = p.c.Call(ctx, "VideoFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishAction(ctx context.Context, Req *VideoService.VideoPublishActionRequest) (r *VideoService.VideoPublishActionResponse, err error) {
	var _args VideoPublishActionArgs
	_args.Req = Req
	var _result VideoPublishActionResult
	if err = p.c.Call(ctx, "VideoPublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishList(ctx context.Context, Req *VideoService.VideoPublishListRequest) (r *VideoService.VideoPublishListResponse, err error) {
	var _args VideoPublishListArgs
	_args.Req = Req
	var _result VideoPublishListResult
	if err = p.c.Call(ctx, "VideoPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishListByIds(ctx context.Context, Req *VideoService.VideoPublishListByIdsRequest) (r *VideoService.VideoPublishListResponse, err error) {
	var _args VideoPublishListByIdsArgs
	_args.Req = Req
	var _result VideoPublishListByIdsResult
	if err = p.c.Call(ctx, "VideoPublishListByIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoFavoriteCount(ctx context.Context, Req *VideoService.UpdateVideoFavoriteCountRequest) (r *VideoService.UpdateVideoInfoResponse, err error) {
	var _args UpdateVideoFavoriteCountArgs
	_args.Req = Req
	var _result UpdateVideoFavoriteCountResult
	if err = p.c.Call(ctx, "UpdateVideoFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoCommentCount(ctx context.Context, Req *VideoService.UpdateVideoCommentCountRequest) (r *VideoService.UpdateVideoInfoResponse, err error) {
	var _args UpdateVideoCommentCountArgs
	_args.Req = Req
	var _result UpdateVideoCommentCountResult
	if err = p.c.Call(ctx, "UpdateVideoCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAuthorIdByVideoId(ctx context.Context, Req *VideoService.GetAuthorIdByVideoIdRequest) (r *VideoService.GetAuthorIdByVideoIdResponse, err error) {
	var _args GetAuthorIdByVideoIdArgs
	_args.Req = Req
	var _result GetAuthorIdByVideoIdResult
	if err = p.c.Call(ctx, "GetAuthorIdByVideoId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
