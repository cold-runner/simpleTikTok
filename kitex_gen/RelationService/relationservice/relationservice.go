// Code generated by Kitex v0.6.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	RelationService "github.com/cold-runner/simpleTikTok/kitex_gen/RelationService"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*RelationService.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":             kitex.NewMethodInfo(relationActionHandler, newRelationActionArgs, newRelationActionResult, false),
		"GetFollowList":              kitex.NewMethodInfo(getFollowListHandler, newGetFollowListArgs, newGetFollowListResult, false),
		"GetFollowerList":            kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
		"QueryRelation":              kitex.NewMethodInfo(queryRelationHandler, newQueryRelationArgs, newQueryRelationResult, false),
		"QueryUserInfosWithRelation": kitex.NewMethodInfo(queryUserInfosWithRelationHandler, newQueryUserInfosWithRelationArgs, newQueryUserInfosWithRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationService.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationService.RelationService).RelationAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationActionArgs:
		success, err := handler.(RelationService.RelationService).RelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationActionResult)
		realResult.Success = success
	}
	return nil
}
func newRelationActionArgs() interface{} {
	return &RelationActionArgs{}
}

func newRelationActionResult() interface{} {
	return &RelationActionResult{}
}

type RelationActionArgs struct {
	Req *RelationService.RelationActionRequest
}

func (p *RelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationService.RelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RelationActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RelationActionArgs) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationActionArgs_Req_DEFAULT *RelationService.RelationActionRequest

func (p *RelationActionArgs) GetReq() *RelationService.RelationActionRequest {
	if !p.IsSetReq() {
		return RelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationActionResult struct {
	Success *RelationService.RelationActionResponse
}

var RelationActionResult_Success_DEFAULT *RelationService.RelationActionResponse

func (p *RelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationService.RelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RelationActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RelationActionResult) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationActionResult) GetSuccess() *RelationService.RelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationService.RelationActionResponse)
}

func (p *RelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationActionResult) GetResult() interface{} {
	return p.Success
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationService.RelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationService.RelationService).GetFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowListArgs:
		success, err := handler.(RelationService.RelationService).GetFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowListArgs() interface{} {
	return &GetFollowListArgs{}
}

func newGetFollowListResult() interface{} {
	return &GetFollowListResult{}
}

type GetFollowListArgs struct {
	Req *RelationService.RelationFollowListRequest
}

func (p *GetFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationService.RelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowListArgs) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowListArgs_Req_DEFAULT *RelationService.RelationFollowListRequest

func (p *GetFollowListArgs) GetReq() *RelationService.RelationFollowListRequest {
	if !p.IsSetReq() {
		return GetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowListResult struct {
	Success *RelationService.RelationFollowListResponse
}

var GetFollowListResult_Success_DEFAULT *RelationService.RelationFollowListResponse

func (p *GetFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationService.RelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowListResult) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowListResult) GetSuccess() *RelationService.RelationFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationService.RelationFollowListResponse)
}

func (p *GetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowListResult) GetResult() interface{} {
	return p.Success
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationService.RelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationService.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(RelationService.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *RelationService.RelationFollowerListRequest
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationService.RelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *RelationService.RelationFollowerListRequest

func (p *GetFollowerListArgs) GetReq() *RelationService.RelationFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowerListResult struct {
	Success *RelationService.RelationFollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *RelationService.RelationFollowerListResponse

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationService.RelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *RelationService.RelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationService.RelationFollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowerListResult) GetResult() interface{} {
	return p.Success
}

func queryRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationService.RelationQueryRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationService.RelationService).QueryRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryRelationArgs:
		success, err := handler.(RelationService.RelationService).QueryRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryRelationResult)
		realResult.Success = success
	}
	return nil
}
func newQueryRelationArgs() interface{} {
	return &QueryRelationArgs{}
}

func newQueryRelationResult() interface{} {
	return &QueryRelationResult{}
}

type QueryRelationArgs struct {
	Req *RelationService.RelationQueryRequest
}

func (p *QueryRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationService.RelationQueryRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryRelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryRelationArgs) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationQueryRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryRelationArgs_Req_DEFAULT *RelationService.RelationQueryRequest

func (p *QueryRelationArgs) GetReq() *RelationService.RelationQueryRequest {
	if !p.IsSetReq() {
		return QueryRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryRelationResult struct {
	Success *RelationService.RelationQueryResponse
}

var QueryRelationResult_Success_DEFAULT *RelationService.RelationQueryResponse

func (p *QueryRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationService.RelationQueryResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryRelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryRelationResult) Unmarshal(in []byte) error {
	msg := new(RelationService.RelationQueryResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryRelationResult) GetSuccess() *RelationService.RelationQueryResponse {
	if !p.IsSetSuccess() {
		return QueryRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationService.RelationQueryResponse)
}

func (p *QueryRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryRelationResult) GetResult() interface{} {
	return p.Success
}

func queryUserInfosWithRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(RelationService.QueryUserInfosWithRelationRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(RelationService.RelationService).QueryUserInfosWithRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryUserInfosWithRelationArgs:
		success, err := handler.(RelationService.RelationService).QueryUserInfosWithRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryUserInfosWithRelationResult)
		realResult.Success = success
	}
	return nil
}
func newQueryUserInfosWithRelationArgs() interface{} {
	return &QueryUserInfosWithRelationArgs{}
}

func newQueryUserInfosWithRelationResult() interface{} {
	return &QueryUserInfosWithRelationResult{}
}

type QueryUserInfosWithRelationArgs struct {
	Req *RelationService.QueryUserInfosWithRelationRequest
}

func (p *QueryUserInfosWithRelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RelationService.QueryUserInfosWithRelationRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryUserInfosWithRelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryUserInfosWithRelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryUserInfosWithRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryUserInfosWithRelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryUserInfosWithRelationArgs) Unmarshal(in []byte) error {
	msg := new(RelationService.QueryUserInfosWithRelationRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryUserInfosWithRelationArgs_Req_DEFAULT *RelationService.QueryUserInfosWithRelationRequest

func (p *QueryUserInfosWithRelationArgs) GetReq() *RelationService.QueryUserInfosWithRelationRequest {
	if !p.IsSetReq() {
		return QueryUserInfosWithRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryUserInfosWithRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryUserInfosWithRelationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryUserInfosWithRelationResult struct {
	Success *RelationService.QueryUserInfosWithRelationResponse
}

var QueryUserInfosWithRelationResult_Success_DEFAULT *RelationService.QueryUserInfosWithRelationResponse

func (p *QueryUserInfosWithRelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(RelationService.QueryUserInfosWithRelationResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryUserInfosWithRelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryUserInfosWithRelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryUserInfosWithRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryUserInfosWithRelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryUserInfosWithRelationResult) Unmarshal(in []byte) error {
	msg := new(RelationService.QueryUserInfosWithRelationResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryUserInfosWithRelationResult) GetSuccess() *RelationService.QueryUserInfosWithRelationResponse {
	if !p.IsSetSuccess() {
		return QueryUserInfosWithRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryUserInfosWithRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*RelationService.QueryUserInfosWithRelationResponse)
}

func (p *QueryUserInfosWithRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserInfosWithRelationResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, Req *RelationService.RelationActionRequest) (r *RelationService.RelationActionResponse, err error) {
	var _args RelationActionArgs
	_args.Req = Req
	var _result RelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, Req *RelationService.RelationFollowListRequest) (r *RelationService.RelationFollowListResponse, err error) {
	var _args GetFollowListArgs
	_args.Req = Req
	var _result GetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *RelationService.RelationFollowerListRequest) (r *RelationService.RelationFollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryRelation(ctx context.Context, Req *RelationService.RelationQueryRequest) (r *RelationService.RelationQueryResponse, err error) {
	var _args QueryRelationArgs
	_args.Req = Req
	var _result QueryRelationResult
	if err = p.c.Call(ctx, "QueryRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserInfosWithRelation(ctx context.Context, Req *RelationService.QueryUserInfosWithRelationRequest) (r *RelationService.QueryUserInfosWithRelationResponse, err error) {
	var _args QueryUserInfosWithRelationArgs
	_args.Req = Req
	var _result QueryUserInfosWithRelationResult
	if err = p.c.Call(ctx, "QueryUserInfosWithRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
