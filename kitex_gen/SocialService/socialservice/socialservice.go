// Code generated by Kitex v0.7.0. DO NOT EDIT.

package socialservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	SocialService "github.com/cold-runner/simpleTikTok/kitex_gen/SocialService"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return socialServiceServiceInfo
}

var socialServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocialService"
	handlerType := (*SocialService.SocialService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentAction": kitex.NewMethodInfo(commentActionHandler, newCommentActionArgs, newCommentActionResult, false),
		"CommentList":   kitex.NewMethodInfo(commentListHandler, newCommentListArgs, newCommentListResult, false),
		"LikeAction":    kitex.NewMethodInfo(likeActionHandler, newLikeActionArgs, newLikeActionResult, false),
		"LikeList":      kitex.NewMethodInfo(likeListHandler, newLikeListArgs, newLikeListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "SocialService",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(SocialService.CommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(SocialService.SocialService).CommentAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentActionArgs:
		success, err := handler.(SocialService.SocialService).CommentAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentActionResult)
		realResult.Success = success
	}
	return nil
}
func newCommentActionArgs() interface{} {
	return &CommentActionArgs{}
}

func newCommentActionResult() interface{} {
	return &CommentActionResult{}
}

type CommentActionArgs struct {
	Req *SocialService.CommentActionRequest
}

func (p *CommentActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(SocialService.CommentActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.CommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentActionArgs_Req_DEFAULT *SocialService.CommentActionRequest

func (p *CommentActionArgs) GetReq() *SocialService.CommentActionRequest {
	if !p.IsSetReq() {
		return CommentActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentActionResult struct {
	Success *SocialService.CommentActionResponse
}

var CommentActionResult_Success_DEFAULT *SocialService.CommentActionResponse

func (p *CommentActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(SocialService.CommentActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.CommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentActionResult) GetSuccess() *SocialService.CommentActionResponse {
	if !p.IsSetSuccess() {
		return CommentActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SocialService.CommentActionResponse)
}

func (p *CommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentActionResult) GetResult() interface{} {
	return p.Success
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(SocialService.CommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(SocialService.SocialService).CommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentListArgs:
		success, err := handler.(SocialService.SocialService).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
	}
	return nil
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *SocialService.CommentListRequest
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(SocialService.CommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.CommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *SocialService.CommentListRequest

func (p *CommentListArgs) GetReq() *SocialService.CommentListRequest {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentListResult struct {
	Success *SocialService.CommentListResponse
}

var CommentListResult_Success_DEFAULT *SocialService.CommentListResponse

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(SocialService.CommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.CommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *SocialService.CommentListResponse {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*SocialService.CommentListResponse)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentListResult) GetResult() interface{} {
	return p.Success
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(SocialService.LikeActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(SocialService.SocialService).LikeAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeActionArgs:
		success, err := handler.(SocialService.SocialService).LikeAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeActionResult)
		realResult.Success = success
	}
	return nil
}
func newLikeActionArgs() interface{} {
	return &LikeActionArgs{}
}

func newLikeActionResult() interface{} {
	return &LikeActionResult{}
}

type LikeActionArgs struct {
	Req *SocialService.LikeActionRequest
}

func (p *LikeActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(SocialService.LikeActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LikeActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LikeActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LikeActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LikeActionArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.LikeActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeActionArgs_Req_DEFAULT *SocialService.LikeActionRequest

func (p *LikeActionArgs) GetReq() *SocialService.LikeActionRequest {
	if !p.IsSetReq() {
		return LikeActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LikeActionResult struct {
	Success *SocialService.LikeActionResponse
}

var LikeActionResult_Success_DEFAULT *SocialService.LikeActionResponse

func (p *LikeActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(SocialService.LikeActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LikeActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LikeActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LikeActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LikeActionResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.LikeActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeActionResult) GetSuccess() *SocialService.LikeActionResponse {
	if !p.IsSetSuccess() {
		return LikeActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SocialService.LikeActionResponse)
}

func (p *LikeActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeActionResult) GetResult() interface{} {
	return p.Success
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(SocialService.LikeListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(SocialService.SocialService).LikeList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeListArgs:
		success, err := handler.(SocialService.SocialService).LikeList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeListResult)
		realResult.Success = success
	}
	return nil
}
func newLikeListArgs() interface{} {
	return &LikeListArgs{}
}

func newLikeListResult() interface{} {
	return &LikeListResult{}
}

type LikeListArgs struct {
	Req *SocialService.LikeListRequest
}

func (p *LikeListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(SocialService.LikeListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LikeListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LikeListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LikeListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LikeListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.LikeListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeListArgs_Req_DEFAULT *SocialService.LikeListRequest

func (p *LikeListArgs) GetReq() *SocialService.LikeListRequest {
	if !p.IsSetReq() {
		return LikeListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LikeListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LikeListResult struct {
	Success *SocialService.LikeListResponse
}

var LikeListResult_Success_DEFAULT *SocialService.LikeListResponse

func (p *LikeListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(SocialService.LikeListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LikeListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LikeListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LikeListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LikeListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(SocialService.LikeListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeListResult) GetSuccess() *SocialService.LikeListResponse {
	if !p.IsSetSuccess() {
		return LikeListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*SocialService.LikeListResponse)
}

func (p *LikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LikeListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentAction(ctx context.Context, Req *SocialService.CommentActionRequest) (r *SocialService.CommentActionResponse, err error) {
	var _args CommentActionArgs
	_args.Req = Req
	var _result CommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *SocialService.CommentListRequest) (r *SocialService.CommentListResponse, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeAction(ctx context.Context, Req *SocialService.LikeActionRequest) (r *SocialService.LikeActionResponse, err error) {
	var _args LikeActionArgs
	_args.Req = Req
	var _result LikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, Req *SocialService.LikeListRequest) (r *SocialService.LikeListResponse, err error) {
	var _args LikeListArgs
	_args.Req = Req
	var _result LikeListResult
	if err = p.c.Call(ctx, "LikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
