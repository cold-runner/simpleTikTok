// Code generated by Kitex v0.6.2. DO NOT EDIT.

package socialservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	SocialService "github.com/cold-runner/simpleTikTok/kitex_gen/SocialService"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FavoriteAction(ctx context.Context, Req *SocialService.FavoriteActionRequest, callOptions ...callopt.Option) (r *SocialService.FavoriteActionResponse, err error)
	CommentAction(ctx context.Context, Req *SocialService.CommentActionRequest, callOptions ...callopt.Option) (r *SocialService.CommentActionResposne, err error)
	FavoriteList(ctx context.Context, Req *SocialService.FavoriteListRequest, callOptions ...callopt.Option) (r *SocialService.FavoriteListResponse, err error)
	CommentList(ctx context.Context, Req *SocialService.CommentListRequest, callOptions ...callopt.Option) (r *SocialService.CommentListResponse, err error)
	GetFavoriteVidList(ctx context.Context, Req *SocialService.GetFavoriteVideoByUidRequest, callOptions ...callopt.Option) (r *SocialService.GetFavoriteVideoByUidResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSocialServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSocialServiceClient struct {
	*kClient
}

func (p *kSocialServiceClient) FavoriteAction(ctx context.Context, Req *SocialService.FavoriteActionRequest, callOptions ...callopt.Option) (r *SocialService.FavoriteActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, Req)
}

func (p *kSocialServiceClient) CommentAction(ctx context.Context, Req *SocialService.CommentActionRequest, callOptions ...callopt.Option) (r *SocialService.CommentActionResposne, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, Req)
}

func (p *kSocialServiceClient) FavoriteList(ctx context.Context, Req *SocialService.FavoriteListRequest, callOptions ...callopt.Option) (r *SocialService.FavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteList(ctx, Req)
}

func (p *kSocialServiceClient) CommentList(ctx context.Context, Req *SocialService.CommentListRequest, callOptions ...callopt.Option) (r *SocialService.CommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentList(ctx, Req)
}

func (p *kSocialServiceClient) GetFavoriteVidList(ctx context.Context, Req *SocialService.GetFavoriteVideoByUidRequest, callOptions ...callopt.Option) (r *SocialService.GetFavoriteVideoByUidResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVidList(ctx, Req)
}
